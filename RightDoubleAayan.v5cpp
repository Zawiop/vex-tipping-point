{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\r\n// Make sure all required headers are included.\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n#include <math.h>\r\n#include <string.h>\r\n\r\n\r\n#include \"vex.h\"\r\n\r\nusing namespace vex;\r\n\r\n// Brain should be defined by default\r\nbrain Brain;\r\n\r\n\r\n// START V5 MACROS\r\n#define waitUntil(condition)                                                   \\\r\n  do {                                                                         \\\r\n    wait(5, msec);                                                             \\\r\n  } while (!(condition))\r\n\r\n#define repeat(iterations)                                                     \\\r\n  for (int iterator = 0; iterator < iterations; iterator++)\r\n// END V5 MACROS\r\n\r\n\r\n// Robot configuration code.\r\nmotor leftMotorA = motor(PORT18, ratio18_1, false);\r\nmotor leftMotorB = motor(PORT5, ratio18_1, false);\r\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\r\nmotor rightMotorA = motor(PORT10, ratio18_1, true);\r\nmotor rightMotorB = motor(PORT2, ratio18_1, true);\r\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\r\ninertial DrivetrainInertial = inertial(PORT9);\r\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\r\n\r\nmotor BackClamp = motor(PORT1, ratio18_1, false);\r\n\r\nmotor FourBar = motor(PORT20, ratio18_1, false);\r\n\r\nmotor Clamp = motor(PORT21, ratio18_1, false);\r\n\r\nmotor Conveyor = motor(PORT16, ratio18_1, false);\r\n\r\ncontroller Controller1 = controller(primary);\r\n\r\nvoid calibrateDrivetrain() {\r\n  wait(200, msec);\r\n  Brain.Screen.print(\"Calibrating\");\r\n  Brain.Screen.newLine();\r\n  Brain.Screen.print(\"Inertial\");\r\n  DrivetrainInertial.calibrate();\r\n  while (DrivetrainInertial.isCalibrating()) {\r\n    wait(25, msec);\r\n  }\r\n\r\n  // Clears the screen and returns the cursor to row 1, column 1.\r\n  Brain.Screen.clearScreen();\r\n  Brain.Screen.setCursor(1, 1);\r\n}// define variable for remote controller enable/disable\r\nbool RemoteControlCodeEnabled = true;\r\n// define variables used for controlling motors based on controller inputs\r\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\r\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\r\n\r\n// define a task that will handle monitoring inputs from Controller1\r\nint rc_auto_loop_function_Controller1() {\r\n  // process the controller input every 20 milliseconds\r\n  // update the motors based on the input values\r\n  while(true) {\r\n    if(RemoteControlCodeEnabled) {\r\n      // calculate the drivetrain motor velocities from the controller joystick axies\r\n      // left = Axis3\r\n      // right = Axis2\r\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\r\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\r\n      \r\n      // check if the value is inside of the deadband range\r\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\r\n        // check if the left motor has already been stopped\r\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\r\n          // stop the left drive motor\r\n          LeftDriveSmart.stop();\r\n          // tell the code that the left motor has been stopped\r\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\r\n        }\r\n      } else {\r\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\r\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\r\n      }\r\n      // check if the value is inside of the deadband range\r\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\r\n        // check if the right motor has already been stopped\r\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\r\n          // stop the right drive motor\r\n          RightDriveSmart.stop();\r\n          // tell the code that the right motor has been stopped\r\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\r\n        }\r\n      } else {\r\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\r\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\r\n      }\r\n      \r\n      // only tell the left drive motor to spin if the values are not in the deadband range\r\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\r\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\r\n        LeftDriveSmart.spin(forward);\r\n      }\r\n      // only tell the right drive motor to spin if the values are not in the deadband range\r\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\r\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\r\n        RightDriveSmart.spin(forward);\r\n      }\r\n    }\r\n    // wait before repeating the process\r\n    wait(20, msec);\r\n  }\r\n  return 0;\r\n}\r\n\r\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\r\n\r\n\r\n\r\n#pragma endregion VEXcode Generated Robot Configuration\r\n\r\n// ----------------------------------------------------------------------------\r\n//                                                                            \r\n//    Project:                                               \r\n//    Author:\r\n//    Created:\r\n//    Configuration:        \r\n//                                                                            \r\n// ----------------------------------------------------------------------------\r\n\r\n// Include the V5 Library\r\n#include \"vex.h\"\r\n\r\n// Allows for easier use of the VEX Library\r\nusing namespace vex;\r\n\r\n// Begin project code\r\n\r\nvoid preAutonomous(void) {\r\n  // actions to do when the program starts\r\n  calibrateDrivetrain();\r\n  Brain.Screen.clearScreen();\r\n  Brain.Screen.print(\"Drivetrain Calibrated\");\r\n}\r\n\r\nvoid matchload() {\r\n  int x = 1;\r\n  if (x<= 6){\r\n    Drivetrain.driveFor(forward, 5, inches);\r\n    Drivetrain.driveFor(reverse, 5, inches);\r\n    x += 1;\r\n  }\r\n}\r\n\r\n\r\nvoid driveInt(int vel, float i) {\r\n  Drivetrain.setDriveVelocity(vel, rpm);\r\n  Drivetrain.drive(forward);\r\n  // if (vel > 0) {\r\n  //   Drivetrain.drive(forward);\r\n  // }\r\n  // else {\r\n  //   Drivetrain.drive(reverse);\r\n  // }\r\n  wait(i, seconds);\r\n}\r\n\r\n\r\nvoid move(int deg, int acc = 50) {\r\n  Drivetrain.setStopping(brake);\r\n  leftMotorA.setPosition(0, degrees);\r\n  float INTERVAL = .1;\r\n  int sign = (deg / abs(deg));\r\n  int vel = 0;\r\n  auto stopDistance = [=, &vel, &acc] {\r\n    int d = 0;\r\n    for (int i = vel; abs(i) > 0; i -= sign * acc)\r\n      d += (i / 60) * 360 * INTERVAL;\r\n    return d;\r\n  };\r\n  while (abs((int) leftMotorA.position(degrees) - deg) > stopDistance()) {\r\n    vel = sign * (abs(vel) + acc <= 200) * acc + vel;\r\n    driveInt(vel, INTERVAL);\r\n  }\r\n  while (vel > 0) {\r\n    vel -= sign * acc;\r\n    driveInt(vel, INTERVAL);\r\n  }\r\n  Drivetrain.stop();\r\n}\r\n\r\n\r\nvoid autonomous(void) {\r\n  \r\n  // Conveyor.setVelocity(300,rpm);\r\n  // BackClamp.setVelocity(200, rpm);\r\n  // Drivetrain.setStopping(coast);\r\n  // Drivetrain.setDriveVelocity(200, rpm);\r\n  // Clamp.setVelocity(200, rpm); \r\n  // FourBar.setVelocity(100, rpm); \r\n  // //Drivetrain.driveFor(forward, 40, inches);\r\n  \r\n  \r\n  move(1050, 35);\r\n  //Drivetrain.driveFor(forward, 2, inches, 50, velocityUnits::rpm);\r\n  Clamp.spin(forward, 200, velocityUnits::rpm);\r\n  wait(200, msec);\r\n  Drivetrain.driveFor(reverse, 15, inches, 150, velocityUnits::rpm);\r\n  Drivetrain.turnToHeading(125, degrees);\r\n  Drivetrain.driveFor(reverse, 25, inches, 150, velocityUnits::rpm);\r\n  wait(200,msec);\r\n  Drivetrain.driveFor(reverse, 3, inches, 50, velocityUnits::rpm);\r\n  BackClamp.spinFor(2100, degrees,200, velocityUnits::rpm); \r\n  Drivetrain.driveFor(forward, 45, inches, 150, velocityUnits::rpm);\r\n  BackClamp.spinFor(-2100, degrees,200, velocityUnits::rpm); \r\n\r\n\r\n\r\n\r\n  // wait(200, msec);\r\n  // Drivetrain.setDriveVelocity(30, rpm);\r\n  // wait(0.5,seconds);\r\n  // Drivetrain.driveFor(forward, 5, inches);\r\n  \r\n  // wait(500, msec);\r\n  // Clamp.spin(forward);\r\n  // wait(100, msec);\r\n  // //Drivetrain.turnFor(right, 2, degrees);\r\n  // Drivetrain.setDriveVelocity(200, percent);\r\n  // Drivetrain.driveFor(reverse,46.5, inches);\r\n  // Drivetrain.turnToHeading(262, degrees);\r\n  // Drivetrain.driveFor(reverse,9, inches);\r\n  // BackClamp.spinFor(forward,2245.1, degrees);\r\n  // Drivetrain.driveFor(forward, 2, inches);\r\n  // Conveyor.spin(forward);\r\n  // FourBar.spinFor(reverse,1000, degrees, 100, velocityUnits::rpm);\r\n  // Drivetrain.driveFor(forward,16, inches, 50, velocityUnits::rpm);\r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n  \r\n}\r\n\r\nvoid userControl(void) {\r\n  Brain.Screen.clearScreen();\r\n  // place driver control in this while loop\r\n  while (true) {\r\n     \r\n     if(Controller1.ButtonB.pressing()){\r\n       FourBar.spinFor(reverse, 400, degrees);\r\n     }\r\n    wait(20, msec);\r\n  }\r\n  Drivetrain.setDriveVelocity(Controller1.Axis3.position(), percent);\r\n  Drivetrain.setDriveVelocity(Controller1.Axis2.position(), percent);\r\n}\r\n\r\nint main() {\r\n  // create competition instance\r\n  competition Competition;\r\n\r\n  // Set up callbacks for autonomous and driver control periods.\r\n  Competition.autonomous(autonomous);\r\n  Competition.drivercontrol(userControl);\r\n\r\n  // Run the pre-autonomous function.\r\n  preAutonomous();\r\n\r\n  // Prevent main from exiting with an infinite loop.\r\n  while (true) {\r\n    wait(100, msec);\r\n  }\r\n}","textLanguage":"cpp","rconfig":[{"port":[18,5,10,2,9],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"BackClamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"FourBar","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[21],"name":"Clamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[16],"name":"Conveyor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}