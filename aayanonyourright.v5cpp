{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT18, ratio18_1, false);\nmotor leftMotorB = motor(PORT5, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT10, ratio18_1, true);\nmotor rightMotorB = motor(PORT2, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT9);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\nmotor Clamp = motor(PORT21, ratio18_1, false);\n\nmotor FourBar = motor(PORT20, ratio18_1, false);\n\nmotor BackClamp = motor(PORT1, ratio18_1, false);\n\nmotor Conveyor = motor(PORT16, ratio6_1, false);\n\ncontroller Controller1 = controller(primary);\ncontroller Controller2 = controller(partner);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  calibrateDrivetrain();\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"Drivetrain Calibrated\");\n}\n\nvoid matchload() {\n  int x = 1;\n  if (x<= 6){\n    Drivetrain.driveFor(forward, 5, inches);\n    Drivetrain.driveFor(reverse, 5, inches);\n    x += 1;\n  }\n}\n\n\nvoid driveInt(int vel, float i) {\n  Drivetrain.setDriveVelocity(vel, rpm);\n  Drivetrain.drive(forward);\n  // if (vel > 0) {\n  //   Drivetrain.drive(forward);\n  // }\n  // else {\n  //   Drivetrain.drive(reverse);\n  // }\n  wait(i, seconds);\n}\n\n\nvoid move(int deg, int acc = 50) {\n  Drivetrain.setStopping(brake);\n  leftMotorA.setPosition(0, degrees);\n  float INTERVAL = .1;\n  int sign = (deg / abs(deg));\n  int vel = 0;\n  auto stopDistance = [=, &vel, &acc] {\n    int d = 0;\n    for (int i = vel; abs(i) > 0; i -= sign * acc)\n      d += (i / 60) * 360 * INTERVAL;\n    return d;\n  };\n  while (abs((int) leftMotorA.position(degrees) - deg) > stopDistance()) {\n    vel = sign * (abs(vel) + acc <= 200) * acc + vel;\n    driveInt(vel, INTERVAL);\n  }\n  while (vel > 0) {\n    vel -= sign * acc;\n    driveInt(vel, INTERVAL);\n  }\n  Drivetrain.stop();\n}\n\n\nvoid autonomous(void) {\n  \n  // Conveyor.setVelocity(300,rpm);\n  // BackClamp.setVelocity(200, rpm);\n  // Drivetrain.setStopping(coast);\n  // Drivetrain.setDriveVelocity(200, rpm);\n  // Clamp.setVelocity(200, rpm); \n  // FourBar.setVelocity(100, rpm); \n  // //Drivetrain.driveFor(forward, 40, inches);\n  \n  \n  move(1020);\n  Drivetrain.driveFor(forward, 2, inches, 50, velocityUnits::rpm);\n  Clamp.spin(forward, 200, velocityUnits::rpm);\n  wait(200, msec);\n  Drivetrain.driveFor(reverse, 25, inches, 150, velocityUnits::rpm);\n  Drivetrain.turnToHeading(280,degrees);\n  Clamp.spinFor(reverse,100, degrees);\n  Drivetrain.driveFor(reverse, 12, inches, 75, velocityUnits::rpm);\n  BackClamp.spinFor(forward,2275, degrees,200, velocityUnits::rpm );\n  Drivetrain.driveFor(forward, 20, inches, 150, velocityUnits::rpm);\n  wait(1, seconds);\n  Conveyor.spin(forward, 300, velocityUnits::rpm);\n  wait(1.5, seconds);\n  BackClamp.spinFor(forward, -2275, degrees, 200, velocityUnits::rpm);\n\n\n\n\n\n  // wait(200, msec);\n  // Drivetrain.setDriveVelocity(30, rpm);\n  // wait(0.5,seconds);\n  // Drivetrain.driveFor(forward, 5, inches);\n  \n  // wait(500, msec);\n  // Clamp.spin(forward);\n  // wait(100, msec);\n  // //Drivetrain.turnFor(right, 2, degrees);\n  // Drivetrain.setDriveVelocity(200, percent);\n  // Drivetrain.driveFor(reverse,46.5, inches);\n  // Drivetrain.turnToHeading(262, degrees);\n  // Drivetrain.driveFor(reverse,9, inches);\n  // BackClamp.spinFor(forward,2245.1, degrees);\n  // Drivetrain.driveFor(forward, 2, inches);\n  // Conveyor.spin(forward);\n  // FourBar.spinFor(reverse,1000, degrees, 100, velocityUnits::rpm);\n  // Drivetrain.driveFor(forward,16, inches, 50, velocityUnits::rpm);\n\n\n  \n  \n  \n\n  \n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  Drivetrain.setDriveVelocity(Controller1.Axis3.position(), percent);\n  Drivetrain.setDriveVelocity(Controller1.Axis2.position(), percent);\n  while (true) {\n     //Clamp-R2&R1\n     if(Controller2.ButtonR2.pressing()){\n       Clamp.spin(fwd, 200, velocityUnits::rpm);\n     }\n     else if (Controller2.ButtonR1.pressing()){\n       Clamp.startRotateFor(fwd, -165, degrees);\n     }\n     //BackClamp\n     if(Controller2.ButtonL1.pressing()){\n       BackClamp.startRotateFor(fwd, -2290, degrees, 200, velocityUnits::rpm);\n     }\n     else if(Controller2.ButtonL2.pressing()){\n       BackClamp.startRotateFor(fwd, 2290, degrees, 200, velocityUnits::rpm);\n     }\n     //Conveyor\n     if(Controller2.ButtonA.pressing()){\n       Conveyor.spin(fwd, 160, velocityUnits::rpm);\n     }\n     else if(Controller2.ButtonX.pressing()){\n       Conveyor.spin(reverse,0, velocityUnits::pct);\n     }\n    wait(20, msec);\n  }\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[18,5,10,2,9],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[21],"name":"Clamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"FourBar","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"BackClamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[16],"name":"Conveyor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[],"name":"Controller2","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}